controller_server:
  ros__parameters:
    use_sim_time: True
    # especifica la frecuencia con la que el controlador intentará generar 
    # comandos de velocidad para seguir el plan
    controller_frequency: 10.0
    # El servidor del controlador filtra la parte de velocidad de los mensajes 
    # de odometría recibidos antes de enviarlos al plugin del controlador. 
    # Los valores de odometría por debajo de este umbral (en rad/s) se establecerán en 0,0.
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    #Duración máxima en segundos que el plugin pueda fallar
    failure_tolerance: 0.3
    #~~~~~~~~~~~~~Nombres de plugins a cargar~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # nombre del plugin para conecer el progreso del robot
    progress_checker_plugin: "progress_checker"
    # nombre del plugin para conocer el resultado del goal
    goal_checker_plugin: "general_goal_checker"
    # nombre del plugin para el controlador
    controller_plugins: ["FollowPath"]
    # Tópico donde se publicaran las velocidades
    # cmd_vel_topic: "/robot/cmd_vel"
    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      # Cantidad mínima que debe moverse un robot para progresar hacia la meta (m).
      required_movement_radius: 0.5
      # Tiempo máximo de que dispone un robot para desplazarse el radio mínimo (s).
      movement_time_allowance: 10.0

    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      # Tolerancia para cumplir los criterios de finalización del objetivo (m).
      xy_goal_tolerance: 0.25
      # Tolerancia para cumplir los criterios de cumplimiento de objetivos (rad).
      yaw_goal_tolerance: 0.25
      #trans_stopped_velocity: 0.25   # m/s
      #rot_stopped_velocity: 0.25    # rad/s
    # DWB parameters
    FollowPath:

      plugin: "nav2_rotation_shim_controller::RotationShimController"
      primary_controller: "dwb_core::DWBLocalPlanner"
      angular_dist_threshold: 0.785
      forward_sampling_distance: 0.5
      rotate_to_heading_angular_vel: 1.8
      max_angular_accel: 3.2
      simulate_ahead_time: 1.0
      rotate_to_goal_heading: false

      # DWB parameters
      # PUblicar la información de la trayectoria
      debug_trajectory_details: True
      #~~~~~~~~~~~~~~~~~~~~Parámetros cinemáticos~~~~~~~~~~~~~~~~~~
      #------------Velocidades--------------
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.25
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.25
      min_speed_theta: 0.0
      #------------Aceleraciones--------------
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      #--------------------XYTheta Iterator--------------------
      # Número de muestreos en velocidades que seran definidos para las posibles trayectorias
      vx_samples: 20
      vy_samples: 0
      vtheta_samples: 30
      #--------------------Standaard generador de trayectorias--------------------
      # Tiempo de simulación por delante (s).
      sim_time: 1.0
      # Distancia lineal hacia delante para proyectar.
      linear_granularity: 0.05
      # Distancia angular hacia adelante para proyectar
      angular_granularity: 0.025
      #----------------------DWB Controlador----------------------------
      # Tiempo máximo permitido entre transformaciones
      transform_tolerance: 0.2
      ########################
      xy_goal_tolerance: 0.25
      ########################
      ########################
      trans_stopped_velocity: 0.25
      ########################
      # Deje de evaluar las puntuaciones después de encontrar la mejor puntuación.
      short_circuit_trajectory_evaluation: True
      stateful: True
      #----------------------Críticos----------------------------
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      #critics: ["RotateToGoal", "Oscillation", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      GoalAlign.scale: 24.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 4.0
      publish_frequency: 2.0
      global_frame: robot_odom
      robot_base_frame: robot_base_footprint
      use_sim_time: True
      rolling_window: true
      width: 2
      height: 2
      resolution: 0.05
      #lethal_cost_threshold: 2
      #robot_radius: 0.25
      robot_radius: 0.3
      #footprint: "[ [0.25, 0.25], [0.25, -0.25], [-0.25, -0.25], [-0.25, 0.25] ]"
      plugins: ["obstacle_layer", "inflation_layer"]
      #filters: ["keepout_filter"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.5
      #keepout_filter:
      #  plugin: "nav2_costmap_2d::KeepoutFilter"
      #  enabled: True
      #  filter_info_topic: "/costmap_filter_info"
      #~~~~~~~~~~~~~~~~~~~Obstacle layer config~~~~~~~~~~~~~~~~~~~+
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        #habilitar capa de obstáculos
        enabled: True
        #Despeje las celdas ocupadas bajo la huella del robot.
        footprint_clearing_enabled: True
        #fuente de observación
        observation_sources: scan
        scan:
          topic: /scan
          # Parámetro para cámaras 3d
          max_obstacle_height: 2.0
          # Si la fuente debe marcarse en el mapa de costes.
          # Si la fuente debe raytrace claro en costmap.
          clearing: True
          marking: True
          # Tipo de dato
          data_type: "LaserScan"
          # Alcance máximo del trazado de rayos para eliminar obstáculos del mapa de costes.
          raytrace_max_range: 5.0
          # Alcance mínimo del trazado de rayos para eliminar obstáculos del mapa de costes.
          raytrace_min_range: 0.5
          # Alcance máximo para marcar obstáculos en el mapa de costes.
          obstacle_max_range: 5.0
          # Alcance mínimo para marcar obstáculos en el mapa de costes
          obstacle_min_range: 0.5
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True

